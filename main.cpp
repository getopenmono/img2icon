
#include <QtCore>
#include <QtMultimedia>
#include <QtDebug>
#include <stdint.h>

QString toCamelCase(const QString& s)
{
    QStringList parts = s.split('-', QString::SkipEmptyParts);
    for (int i=1; i<parts.size(); ++i)
        parts[i].replace(0, 1, parts[i][0].toUpper());

    return parts.join("");
}

void alphaImage(const QString &varName, const QImage &image, QIODevice *output)
{
    QTextStream writer(output);
    writer << "// Generated by img2icon, alpha channel" << endl << endl;
    writer << "#include <mono_icon.h>" << endl << endl;
    writer << "namespace mono { namespace display { " << endl;
    writer << "\tstatic const unsigned char " << varName << "Bitmap[] = {" <<endl;

    for(int h=0;h<image.height(); h++)
    {
        for(int w=0; w<image.width(); w++)
        {
            QColor c = image.pixelColor(w, h);
            uint8_t pixel = c.alpha();

            writer << pixel << ", ";
        }
        writer << endl;
    }

    writer << "0 };" << endl << endl;
    writer << "\tconst MonoIcon " << varName << " = {" << endl;
    writer << "\t\t" << image.width() << ", " << image.height() << ", (uint8_t*) " << varName << "Bitmap" << endl << "\t};" << endl;
    writer << "} }" << endl;
}

void greyImage(const QString varName, const QImage &image, QIODevice *output, bool invert)
{
    QTextStream writer(output);

    writer << "// Generated by img2icon, grey channel" << endl << endl;
    writer << "#include <mono_icon.h>" << endl << endl;
    writer << "namespace mono { namespace display { " << endl;
    writer << "\tstatic const unsigned char " << varName << "Bitmap[] = {" <<endl;

    for(int h=0;h<image.height(); h++)
    {
        for(int w=0; w<image.width(); w++)
        {
            uint8_t pixel = image.pixelColor(w, h).lightness();

            if (!invert)
                pixel = 255 - pixel;

            writer << pixel << ", ";
        }
        writer << endl;
    }

    writer << "0 };" << endl << endl;
    writer << "\tconst MonoIcon " << varName << " = {" << endl;
    writer << "\t\t" << image.width() << ", " << image.height() << ", (uint8_t*) " << varName << "Bitmap" << endl << "\t};" << endl;
    writer << "} }" << endl;
}

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    QCoreApplication::setApplicationName("img2icon");
    QCoreApplication::setApplicationVersion("1.0");

    QCommandLineParser parser;
    parser.setApplicationDescription("Convert bitmap image files into Mono SDK icon format");
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addPositionalArgument("input", QCoreApplication::translate("main", "Source image file."));

    QCommandLineOption greyChannelOption(QStringList() << "g" << "grey", QCoreApplication::translate("main", "Use monochrome channel and not alpha values."));
    QCommandLineOption invertOption(QStringList() << "i" << "invert", QCoreApplication::translate("main", "Invert the bitmap values, dark is light and light is dark."));
    QCommandLineOption targetDirectoryOption(QStringList() << "d" << "destination",
                                             QCoreApplication::translate("main", "The directory to place the converted file in."),
                                             QCoreApplication::translate("main", "directory"));
    QCommandLineOption downscaleOption(
        QStringList() << "s" << "size",
        QCoreApplication::translate("main", "Downscale to X times Y pixels."),
        "X,Y"
    );
    parser.addOption(targetDirectoryOption);
    parser.addOption(greyChannelOption);
    parser.addOption(invertOption);
    parser.addOption(downscaleOption);

    parser.process(app);

    const QStringList args = parser.positionalArguments();
    if (args.count() < 1)
    {
        parser.showHelp(1);
    }

    QString inputFile = args.at(0);
    if (QFile::exists(inputFile) == false)
    {
        qWarning() << "File not found.";
        return 1;
    }

    QFileInfo info(inputFile);
    QImage original(inputFile);
    size_t x = original.size().width();
    size_t y = original.size().height();
    qDebug() << "Input image size is: " << x << "*" << y;

    if (parser.isSet(downscaleOption))
    {
        QStringList xAndY = parser.value(downscaleOption).split(",");
        x = xAndY[0].toUInt();
        y = xAndY[1].toUInt();
        qDebug() << "Scaling to " << x << "*" << y;
    }
    QImage transformed = original.scaled(x, y, Qt::KeepAspectRatio, Qt::SmoothTransformation);

    QString outputFile;
    if (parser.isSet(targetDirectoryOption))
    {
        outputFile = parser.value(targetDirectoryOption);
    }
    else
    {
        outputFile = info.dir().path() + "/" + info.baseName() + ".h";
    }
    QFile outFile(outputFile);
    outFile.open(QIODevice::WriteOnly);

    QString varName = toCamelCase(info.baseName());
    qDebug() << "Global C variable:" << varName;

    if (parser.isSet(greyChannelOption))
    {
        greyImage(varName, transformed, &outFile, parser.isSet(invertOption));
    }
    else if (transformed.hasAlphaChannel())
        alphaImage(varName, transformed, &outFile);
    else
        qWarning() << "Image does not have an alpha channel. Use grey option.";

    outFile.close();

    return 0;
}
